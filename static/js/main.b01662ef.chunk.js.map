{"version":3,"sources":["components/Details.js","App.js","serviceWorker.js","index.js","assets/resume.pdf"],"names":["styles","css","Details","className","Typography","variant","href","resume","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"srCAWA,IAAMA,EAASC,YAAH,KAmFGC,EAhCC,WACd,OACE,6BAASC,UAAWH,GAClB,kBAACI,EAAA,EAAD,CAAYC,QAAQ,MAApB,iBACgB,6BADhB,eAEc,6BACZ,uBAAGC,KAAK,yBAAR,cAGF,yBAAKH,UAAU,SACb,4BACE,4BACE,uBAAGG,KAAK,wCAAR,aAEF,4BACE,uBAAGA,KAAK,mCAAR,WAEF,4BACE,uBAAGA,KAAMC,KAAT,aAKN,6BAASJ,UAAU,WACjB,uBAAGA,UAAU,UAAUG,KAAK,wCAA5B,c,wFClFR,IAAMN,EAASC,YAAH,KAYGO,MARf,WACE,OACE,6BAASL,UAAWH,GAClB,kBAAC,EAAD,QCCcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBErInBC,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.b01662ef.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { css } from 'emotion'\nimport { Card } from '@material-ui/core'\nimport { ExpandMore } from '@material-ui/icons'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardActions from '@material-ui/core/CardActions'\nimport Typography from '@material-ui/core/Typography'\nimport IconButton from '@material-ui/core/IconButton'\nimport Collapse from '@material-ui/core/Collapse'\nimport resume from '../assets/resume.pdf'\n\nconst styles = css`\n  display: flex;\n  flex-direction: column;\n  padding-top: 4rem;\n\n  a {\n    color: #111;\n    font-family: helvetica neue, helvetica, sans-serif;\n    transition: color 0.15s ease-in;\n    text-decoration: none;\n  }\n\n  a:hover {\n    color: #aaa;\n  }\n\n  .MuiTypography-h3 {\n    font-weight: 700;\n    font-size: 2.25rem;\n    font-family: helvetica neue, helvetica, sans-serif;\n    text-transform: uppercase;\n    letter-spacing: -0.1rem;\n  }\n\n  .links {\n    display: flex;\n    flex-direction: column;\n    margin-top: 4rem;\n    margin-bottom: 4rem;\n\n    ul {\n      list-style-type: none;\n      margin: 0;\n      padding: 0;\n    }\n\n    li {\n      a {\n        font-weight: 400;\n        transition: color 0.15s ease-in;\n        text-decoration: none;\n        text-transform: lowercase;\n      }\n    }\n  }\n\n  .contact {\n    font-weight: 700;\n  }\n`\n\nconst Details = () => {\n  return (\n    <section className={styles}>\n      <Typography variant=\"h3\">\n        Brennan Glynn <br />\n        Engineer at <br />\n        <a href=\"https://clickbank.com\">ClickBank</a>\n      </Typography>\n\n      <div className=\"links\">\n        <ul>\n          <li>\n            <a href=\"https://linkedin.com/in/brennanglynn\">linkedin</a>\n          </li>\n          <li>\n            <a href=\"https://github.com/brennanglynn\">github</a>\n          </li>\n          <li>\n            <a href={resume}>resume</a>\n          </li>\n        </ul>\n      </div>\n\n      <section className=\"contact\">\n        <a className=\"contact\" href=\"mailto:brennanglynn@u.boisestate.edu\">\n          contact\n        </a>\n      </section>\n    </section>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport { css } from 'emotion'\nimport Details from './components/Details'\n\nconst styles = css`\n  margin: 4rem;\n`\n\nfunction App() {\n  return (\n    <article className={styles}>\n      <Details />\n    </article>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/resume.39f2b3b8.pdf\";"],"sourceRoot":""}